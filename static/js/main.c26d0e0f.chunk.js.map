{"version":3,"sources":["utils/calculate.js","components/Calculator.js","serviceWorker.js","index.js"],"names":["calculation","numbers","operators","findNumber","numberMatch","match","push","substring","length","findOperator","operatorMatch","map","number","toString","charAt","Math","sqrt","Number","slice","forEach","prioOperators","index","_","findIndex","op","indexOf","result","operator","splice","firstNumber","secondNumber","pow","isNaN","numberKeys","value","order","mathKeys","Button","onPress","flex","className","style","onClick","Calculator","props","state","appendValue","bind","doCalculation","this","isNumberKey","key","obj","isMathKey","lastKey","secondLastKey","split","reverse","join","setState","calculate","smallerFont","calculationFontSize","fontSize","btn","Component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c26d0e0f.chunk.js","sourcesContent":["import _ from 'lodash';\n\nexport default (calculation) => {\n\n  let numbers = [];\n  let operators = [];\n\n  let numberRegex = '^([√]?[-]?[\\\\d]*[.]?[\\\\d]*(e\\\\+\\\\d*)?)';\n  let operatorRegex = '^([+\\\\-x/^])';\n\n  let findNumber = () => {\n    let numberMatch = calculation.match(numberRegex);\n\n    if (numberMatch && numberMatch[0]) {\n      numbers.push(numberMatch[0]);\n\n      calculation = calculation.substring(numberMatch[0].length);\n    }\n  }\n\n  let findOperator = () => {\n    let operatorMatch = calculation.match(operatorRegex);\n\n    if (operatorMatch && operatorMatch[0]) {\n      operators.push(operatorMatch[0]);\n\n      calculation = calculation.substring(operatorMatch[0].length);\n    }\n  }\n\n  while (calculation.length !== 0) {\n    findNumber();\n    findOperator();\n\n    if (numbers.length === 0 && operators.length === 0) {\n      return 'Error';\n    }\n  }\n\n  // Evaluate square roots first\n  numbers = numbers.map((number) => {\n    number = number.toString();\n    if (number.charAt(0) === '√') {\n      return Math.sqrt(Number(number.slice(1, number.length)));\n    }\n    return number;\n  });\n\n  while (operators.length !== 0) {\n\n    let orderOfOperations = [\n      ['^'],\n      ['x', '/'],\n      ['+', '-'],\n    ];\n\n    orderOfOperations.forEach((prioOperators) => {\n\n      let index = _.findIndex(operators, (op) => prioOperators.indexOf(op) !== -1);\n\n      while (index !== -1) {\n\n        let result = null;\n\n        let operator = operators[index];\n\n        operators.splice(index, 1);\n\n        let firstNumber = numbers[index];\n        let secondNumber = numbers[index + 1];\n\n        numbers.splice((index), 1);\n\n        if (firstNumber != null && operator && secondNumber !== null) {\n          switch (operator) {\n            case 'x':\n              result = Number(firstNumber) * Number(secondNumber);\n              break;\n\n            case '/':\n              result = Number(firstNumber) / Number(secondNumber);\n              break;\n\n            case '^':\n              result = Math.pow(Number(firstNumber), Number(secondNumber));\n              break;\n\n            case '+':\n              result = Number(firstNumber) + Number(secondNumber);\n              break;\n\n            case '-':\n              result = Number(firstNumber) - Number(secondNumber);\n              break;\n          }\n        }\n\n        numbers[index] = result;\n\n        index = _.findIndex(operators, (op) => prioOperators.indexOf(op) !== -1);\n\n      }\n    });\n  }\n\n  if (isNaN(numbers[0])) {\n    return 'Error';\n  }\n\n  return numbers[0];\n}\n","import React, { Component } from 'react';\nimport _ from 'lodash';\nimport calculate from '../utils/calculate';\n\nconst numberKeys = [\n  { value: 0, order: 18 },\n  { value: 1, order: 13 },\n  { value: 2, order: 14 },\n  { value: 3, order: 15 },\n  { value: 4, order: 9 },\n  { value: 5, order: 10 },\n  { value: 6, order: 11 },\n  { value: 7, order: 5 },\n  { value: 8, order: 6 },\n  { value: 9, order: 7 },\n  { value: '.', order: 17 },\n];\n\nconst mathKeys = [\n  { value: '+', order: 2 },\n  { value: '-', order: 3 },\n  { value: '/', order: 4 },\n  { value: 'x', order: 8 },\n  { value: '^', order: 12 },\n  { value: '√', order: 16 },\n];\n\nconst Button = ({ value, onPress, order, flex }) => {\n  return (\n    <div className=\"btn\" style={{order: order, flex: flex}} onClick={onPress}>\n      {value}\n    </div>\n  );\n}\n\nclass Calculator extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      calculation: '0',\n    }\n\n    this.appendValue = this.appendValue.bind(this);\n    this.doCalculation = this.doCalculation.bind(this);\n  }\n\n  appendValue(value) {\n\n    let calculation = this.state.calculation;\n\n    let isNumberKey = (key) => _.findIndex(numberKeys, (obj) => obj.value.toString() === key.toString()) !== -1;\n    let isMathKey = (key) => !isNumberKey(key) && _.findIndex(mathKeys, (obj) => obj.value === key) !== -1;\n\n    let lastKey = calculation.slice(-1);\n    let secondLastKey = calculation.slice(-2, -1);\n\n      // infinity not supported, reset to 0.\n    if (calculation === 'Infinity' || calculation === 'Error') {\n      calculation = '';\n\n      // remove leading 0 when key is a valid starting character\n    } else if (calculation === '0' && (isNumberKey(value) || value === '√' || value === '-')) {\n      calculation = '';\n\n      // starting with a math key (thats not '-' or '√') is unsupported...\n    } else if (calculation === '0') {\n      value = '';\n\n      // assume multiplication with a number and then square root (no operator in between)\n    } else if (value === '√' && (!isMathKey(lastKey) || lastKey === '√')) {\n\n      if (secondLastKey === 'x' && lastKey === '√') {\n        value = '';\n      } else {\n        calculation += 'x';\n      }\n\n      // double math key replaces first one\n    } else if (isMathKey(lastKey) && isMathKey(value)) {\n\n      // replace the operator and minus value from calculation when the operator changes\n      if (isMathKey(secondLastKey) && lastKey === '-') {\n        calculation = calculation.slice(0, -1);\n      }\n\n      let minusAllowed = (!secondLastKey || isNumberKey(secondLastKey) || secondLastKey === 'x') && value === '-' && isMathKey(lastKey);\n      let isAllowed = minusAllowed || (isMathKey(lastKey) && (value === '√' && lastKey !== '√'));\n\n      if (!isAllowed) {\n        calculation = calculation.slice(0, -1);\n      }\n\n      // no double decimals allowed\n    } else if (value === '.') {\n\n      let reversedCalc = calculation.split(\"\").reverse().join(\"\");\n      let numberRegex = '^([-]?[\\\\d]*[.]?[\\\\d]*(e+\\\\d*)?)';\n      let numberMatch = reversedCalc.match(numberRegex);\n\n      if (numberMatch && numberMatch[0].indexOf('.') !== -1) {\n        value = '';\n      }\n    }\n\n    calculation += value;\n\n    this.setState({ calculation: calculation });\n  }\n\n  doCalculation() {\n\n    let calculation = this.state.calculation;\n\n    this.setState({ calculation: calculate(calculation).toString() });\n\n  }\n\n  render() {\n\n    let smallerFont = 4.5 - (this.state.calculation.length / 5 / 2.6);\n    let calculationFontSize = (this.state.calculation.length > 18 ? smallerFont < 2.3 ? 2.3 : smallerFont : 3.5);\n\n    return (\n      <div className=\"background\">\n        <div className=\"container\">\n          <div className=\"calculator\">\n\n            <div className=\"calculation\" style={{ fontSize: calculationFontSize + 'rem' }}>\n              {this.state.calculation}\n            </div>\n            <div className=\"buttons\">\n\n                { numberKeys.map((btn) => (\n                  <Button\n                    value={btn.value.toString()}\n                    order={btn.order}\n                    onPress={() => this.appendValue(btn.value)}\n                  />\n                ))}\n                { mathKeys.map((btn) => (\n                  <Button\n                    value={btn.value.toString()}\n                    order={btn.order}\n                    onPress={() => this.appendValue(btn.value)}\n                  />\n                ))}\n                <Button\n                  value='AC'\n                  order={1}\n                  onPress={() => this.setState({ calculation: '0'})}\n                />\n                <Button\n                  value='='\n                  order={19}\n                  flex={2}\n                  onPress={() => this.doCalculation()}\n                />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Calculator;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Calculator from './components/Calculator';\nimport * as serviceWorker from './serviceWorker';\nimport './main.scss'\n\nReactDOM.render(\n    <Calculator />\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}